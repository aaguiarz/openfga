// Code generated by MockGen. DO NOT EDIT.
// Source: dispatch.go
//
// Generated by this command:
//
//	mockgen -source dispatch.go -destination ../../internal/mocks/mock_dispatch.go -package mocks Dispatcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dispatchv1alpha1 "github.com/openfga/openfga/internal/proto/dispatch/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockCheckDispatcher is a mock of CheckDispatcher interface.
type MockCheckDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCheckDispatcherMockRecorder
}

// MockCheckDispatcherMockRecorder is the mock recorder for MockCheckDispatcher.
type MockCheckDispatcherMockRecorder struct {
	mock *MockCheckDispatcher
}

// NewMockCheckDispatcher creates a new mock instance.
func NewMockCheckDispatcher(ctrl *gomock.Controller) *MockCheckDispatcher {
	mock := &MockCheckDispatcher{ctrl: ctrl}
	mock.recorder = &MockCheckDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckDispatcher) EXPECT() *MockCheckDispatcherMockRecorder {
	return m.recorder
}

// DispatchCheck mocks base method.
func (m *MockCheckDispatcher) DispatchCheck(ctx context.Context, req *dispatchv1alpha1.DispatchCheckRequest) (*dispatchv1alpha1.DispatchCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchCheck", ctx, req)
	ret0, _ := ret[0].(*dispatchv1alpha1.DispatchCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispatchCheck indicates an expected call of DispatchCheck.
func (mr *MockCheckDispatcherMockRecorder) DispatchCheck(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchCheck", reflect.TypeOf((*MockCheckDispatcher)(nil).DispatchCheck), ctx, req)
}
