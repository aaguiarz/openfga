// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: dispatch/v1alpha1/dispatch_service.proto

package dispatchv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DispatchCheckRequest_ResolutionBehavior int32

const (
	DispatchCheckRequest_RESOLUTION_BEHAVIOR_UNSPECIFIED DispatchCheckRequest_ResolutionBehavior = 0
	// RESOLUTION_BEHAVIOR_RESOLVE_ANY will return a response as soon as any of the dispatched requests
	// resolve to a permittable decision.
	//
	// RESOLVE_ANY should be used to search for a single resolution path among one or
	// more branches of resolution.
	DispatchCheckRequest_RESOLUTION_BEHAVIOR_RESOLVE_ANY DispatchCheckRequest_ResolutionBehavior = 1
	// RESOLUTION_BEHAVIOR_RESOLVE_ALL will force the dispatched request to resolve all
	// results before returning a response.
	DispatchCheckRequest_RESOLUTION_BEHAVIOR_RESOLVE_ALL DispatchCheckRequest_ResolutionBehavior = 2
)

// Enum value maps for DispatchCheckRequest_ResolutionBehavior.
var (
	DispatchCheckRequest_ResolutionBehavior_name = map[int32]string{
		0: "RESOLUTION_BEHAVIOR_UNSPECIFIED",
		1: "RESOLUTION_BEHAVIOR_RESOLVE_ANY",
		2: "RESOLUTION_BEHAVIOR_RESOLVE_ALL",
	}
	DispatchCheckRequest_ResolutionBehavior_value = map[string]int32{
		"RESOLUTION_BEHAVIOR_UNSPECIFIED": 0,
		"RESOLUTION_BEHAVIOR_RESOLVE_ANY": 1,
		"RESOLUTION_BEHAVIOR_RESOLVE_ALL": 2,
	}
)

func (x DispatchCheckRequest_ResolutionBehavior) Enum() *DispatchCheckRequest_ResolutionBehavior {
	p := new(DispatchCheckRequest_ResolutionBehavior)
	*p = x
	return p
}

func (x DispatchCheckRequest_ResolutionBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DispatchCheckRequest_ResolutionBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_dispatch_v1alpha1_dispatch_service_proto_enumTypes[0].Descriptor()
}

func (DispatchCheckRequest_ResolutionBehavior) Type() protoreflect.EnumType {
	return &file_dispatch_v1alpha1_dispatch_service_proto_enumTypes[0]
}

func (x DispatchCheckRequest_ResolutionBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DispatchCheckRequest_ResolutionBehavior.Descriptor instead.
func (DispatchCheckRequest_ResolutionBehavior) EnumDescriptor() ([]byte, []int) {
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP(), []int{0, 0}
}

// DispatchCheckRequest represents a single dispatchable Check request.
type DispatchCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId              string                                  `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AuthorizationModelId string                                  `protobuf:"bytes,2,opt,name=authorization_model_id,json=authorizationModelId,proto3" json:"authorization_model_id,omitempty"`
	ObjectType           string                                  `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectIds            []string                                `protobuf:"bytes,4,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
	Relation             string                                  `protobuf:"bytes,5,opt,name=relation,proto3" json:"relation,omitempty"`
	SubjectType          string                                  `protobuf:"bytes,6,opt,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	SubjectId            string                                  `protobuf:"bytes,7,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectRelation      string                                  `protobuf:"bytes,8,opt,name=subject_relation,json=subjectRelation,proto3" json:"subject_relation,omitempty"`
	RequestMetadata      *DispatchCheckRequestMetadata           `protobuf:"bytes,9,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	ResolutionBehavior   DispatchCheckRequest_ResolutionBehavior `protobuf:"varint,10,opt,name=resolution_behavior,json=resolutionBehavior,proto3,enum=dispatch.v1alpha1.DispatchCheckRequest_ResolutionBehavior" json:"resolution_behavior,omitempty"`
}

func (x *DispatchCheckRequest) Reset() {
	*x = DispatchCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchCheckRequest) ProtoMessage() {}

func (x *DispatchCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchCheckRequest.ProtoReflect.Descriptor instead.
func (*DispatchCheckRequest) Descriptor() ([]byte, []int) {
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP(), []int{0}
}

func (x *DispatchCheckRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *DispatchCheckRequest) GetAuthorizationModelId() string {
	if x != nil {
		return x.AuthorizationModelId
	}
	return ""
}

func (x *DispatchCheckRequest) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *DispatchCheckRequest) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *DispatchCheckRequest) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *DispatchCheckRequest) GetSubjectType() string {
	if x != nil {
		return x.SubjectType
	}
	return ""
}

func (x *DispatchCheckRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *DispatchCheckRequest) GetSubjectRelation() string {
	if x != nil {
		return x.SubjectRelation
	}
	return ""
}

func (x *DispatchCheckRequest) GetRequestMetadata() *DispatchCheckRequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *DispatchCheckRequest) GetResolutionBehavior() DispatchCheckRequest_ResolutionBehavior {
	if x != nil {
		return x.ResolutionBehavior
	}
	return DispatchCheckRequest_RESOLUTION_BEHAVIOR_UNSPECIFIED
}

type DispatchCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResultsForeachObjectID represents the map of objectIDs and the Check result/outcome for
	// the given user/subject whose relationship was being evaluated.
	//
	// For example,
	//
	//	"1": {Allowed: true},
	//	"2": {Allowed: false},
	//
	// indicates that the subject has a relationship with objectID "1" but not with objectID "2".
	ResultsForeachObjectId map[string]*DispatchCheckResult `protobuf:"bytes,1,rep,name=results_foreach_object_id,json=resultsForeachObjectId,proto3" json:"results_foreach_object_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ResolutionMetadata reports the aggregate of the resolution metadata values that were required
	// to solve the dispatched Check request.
	ResolutionMetadata *DispatchCheckResolutionMetadata `protobuf:"bytes,2,opt,name=resolution_metadata,json=resolutionMetadata,proto3" json:"resolution_metadata,omitempty"`
}

func (x *DispatchCheckResponse) Reset() {
	*x = DispatchCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchCheckResponse) ProtoMessage() {}

func (x *DispatchCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchCheckResponse.ProtoReflect.Descriptor instead.
func (*DispatchCheckResponse) Descriptor() ([]byte, []int) {
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP(), []int{1}
}

func (x *DispatchCheckResponse) GetResultsForeachObjectId() map[string]*DispatchCheckResult {
	if x != nil {
		return x.ResultsForeachObjectId
	}
	return nil
}

func (x *DispatchCheckResponse) GetResolutionMetadata() *DispatchCheckResolutionMetadata {
	if x != nil {
		return x.ResolutionMetadata
	}
	return nil
}

type DispatchCheckRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Depth is the current level in the evaluation tree w.r.t. the current branch being evaluated.
	// When we traverse one level, we decrement by 1. If the depth hits 0, we throw an ErrResolutionDepthExceeded
	// error.
	Depth uint32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	// The number of database queries that have accumulated up to the point of this subproblem being dispatched.
	//
	// If the dispatched suproblem involves multiple child subproblems, then this count will increase
	// as a function of the number of direct database lookups for the dispatched child subproblems
	// that were not cached.
	DatastoreQueryCount uint32 `protobuf:"varint,2,opt,name=datastore_query_count,json=datastoreQueryCount,proto3" json:"datastore_query_count,omitempty"`
	// The number of dispatched subproblems that have accumulated up to the point of this subproblem being dispatched.
	//
	// We subsequently add to this count to accumulate the aggregate sum of the dispatch count between this dispatched
	// subproblem and it's parent subproblem.
	DispatchCount uint32 `protobuf:"varint,3,opt,name=dispatch_count,json=dispatchCount,proto3" json:"dispatch_count,omitempty"`
	// WasThrottled indicates whether the request was throttled at some point in its resolution.
	WasThrottled bool `protobuf:"varint,4,opt,name=was_throttled,json=wasThrottled,proto3" json:"was_throttled,omitempty"`
	// VisitedParentSubproblems is a map whose keys indicate the set of parent subproblems which have
	// already been visited w.r.t. this subproblem being dispatched.
	//
	// If this subproblem being dispatched has already been visited, then an ErrCyleDetected error
	// will be raised.
	VisitedParentSubproblems map[string]*emptypb.Empty `protobuf:"bytes,5,rep,name=visited_parent_subproblems,json=visitedParentSubproblems,proto3" json:"visited_parent_subproblems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DispatchCheckRequestMetadata) Reset() {
	*x = DispatchCheckRequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchCheckRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchCheckRequestMetadata) ProtoMessage() {}

func (x *DispatchCheckRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchCheckRequestMetadata.ProtoReflect.Descriptor instead.
func (*DispatchCheckRequestMetadata) Descriptor() ([]byte, []int) {
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP(), []int{2}
}

func (x *DispatchCheckRequestMetadata) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *DispatchCheckRequestMetadata) GetDatastoreQueryCount() uint32 {
	if x != nil {
		return x.DatastoreQueryCount
	}
	return 0
}

func (x *DispatchCheckRequestMetadata) GetDispatchCount() uint32 {
	if x != nil {
		return x.DispatchCount
	}
	return 0
}

func (x *DispatchCheckRequestMetadata) GetWasThrottled() bool {
	if x != nil {
		return x.WasThrottled
	}
	return false
}

func (x *DispatchCheckRequestMetadata) GetVisitedParentSubproblems() map[string]*emptypb.Empty {
	if x != nil {
		return x.VisitedParentSubproblems
	}
	return nil
}

type DispatchCheckResolutionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum depth of the Check resolution path required to resolve the dispatched subproblem.
	Depth uint32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	// The number of database queries that were required to resolve the dispatched subproblem.
	//
	// If the dispatched suproblem involves multiple child subproblems, then this count will increase
	// as a function of the number of direct database lookups for the dispatched child subproblems
	// that were not cached.
	DatastoreQueryCount uint32 `protobuf:"varint,2,opt,name=datastore_query_count,json=datastoreQueryCount,proto3" json:"datastore_query_count,omitempty"`
	// For a given dispatched subproblem, the dispatch count is the number of child subproblems that
	// had to be dispatched to resolve the parent subproblem.
	DispatchCount uint32 `protobuf:"varint,3,opt,name=dispatch_count,json=dispatchCount,proto3" json:"dispatch_count,omitempty"`
	// Indicates if the dispatched subproblem that was evaluated involved
	// a cycle in the evaluation.
	CycleDetected bool `protobuf:"varint,4,opt,name=cycle_detected,json=cycleDetected,proto3" json:"cycle_detected,omitempty"`
}

func (x *DispatchCheckResolutionMetadata) Reset() {
	*x = DispatchCheckResolutionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchCheckResolutionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchCheckResolutionMetadata) ProtoMessage() {}

func (x *DispatchCheckResolutionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchCheckResolutionMetadata.ProtoReflect.Descriptor instead.
func (*DispatchCheckResolutionMetadata) Descriptor() ([]byte, []int) {
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP(), []int{3}
}

func (x *DispatchCheckResolutionMetadata) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *DispatchCheckResolutionMetadata) GetDatastoreQueryCount() uint32 {
	if x != nil {
		return x.DatastoreQueryCount
	}
	return 0
}

func (x *DispatchCheckResolutionMetadata) GetDispatchCount() uint32 {
	if x != nil {
		return x.DispatchCount
	}
	return 0
}

func (x *DispatchCheckResolutionMetadata) GetCycleDetected() bool {
	if x != nil {
		return x.CycleDetected
	}
	return false
}

// DispatchCheckResult represents an individual Check outcome for a single object.
type DispatchCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allowed indicates if the subject in question was allowed (permit decision) or denied.
	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *DispatchCheckResult) Reset() {
	*x = DispatchCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchCheckResult) ProtoMessage() {}

func (x *DispatchCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchCheckResult.ProtoReflect.Descriptor instead.
func (*DispatchCheckResult) Descriptor() ([]byte, []int) {
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP(), []int{4}
}

func (x *DispatchCheckResult) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

var File_dispatch_v1alpha1_dispatch_service_proto protoreflect.FileDescriptor

var file_dispatch_v1alpha1_dispatch_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x04, 0x0a, 0x14, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0xf0, 0x02, 0x0a,
	0x15, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x16, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x71, 0x0a, 0x1b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa7, 0x03, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x1a, 0x63, 0x0a, 0x1d, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x1f, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0xe0, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x42, 0x14, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x11, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xca, 0x02, 0x11, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1d, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x3a,
	0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dispatch_v1alpha1_dispatch_service_proto_rawDescOnce sync.Once
	file_dispatch_v1alpha1_dispatch_service_proto_rawDescData = file_dispatch_v1alpha1_dispatch_service_proto_rawDesc
)

func file_dispatch_v1alpha1_dispatch_service_proto_rawDescGZIP() []byte {
	file_dispatch_v1alpha1_dispatch_service_proto_rawDescOnce.Do(func() {
		file_dispatch_v1alpha1_dispatch_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_dispatch_v1alpha1_dispatch_service_proto_rawDescData)
	})
	return file_dispatch_v1alpha1_dispatch_service_proto_rawDescData
}

var file_dispatch_v1alpha1_dispatch_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dispatch_v1alpha1_dispatch_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dispatch_v1alpha1_dispatch_service_proto_goTypes = []interface{}{
	(DispatchCheckRequest_ResolutionBehavior)(0), // 0: dispatch.v1alpha1.DispatchCheckRequest.ResolutionBehavior
	(*DispatchCheckRequest)(nil),                 // 1: dispatch.v1alpha1.DispatchCheckRequest
	(*DispatchCheckResponse)(nil),                // 2: dispatch.v1alpha1.DispatchCheckResponse
	(*DispatchCheckRequestMetadata)(nil),         // 3: dispatch.v1alpha1.DispatchCheckRequestMetadata
	(*DispatchCheckResolutionMetadata)(nil),      // 4: dispatch.v1alpha1.DispatchCheckResolutionMetadata
	(*DispatchCheckResult)(nil),                  // 5: dispatch.v1alpha1.DispatchCheckResult
	nil,                                          // 6: dispatch.v1alpha1.DispatchCheckResponse.ResultsForeachObjectIdEntry
	nil,                                          // 7: dispatch.v1alpha1.DispatchCheckRequestMetadata.VisitedParentSubproblemsEntry
	(*emptypb.Empty)(nil),                        // 8: google.protobuf.Empty
}
var file_dispatch_v1alpha1_dispatch_service_proto_depIdxs = []int32{
	3, // 0: dispatch.v1alpha1.DispatchCheckRequest.request_metadata:type_name -> dispatch.v1alpha1.DispatchCheckRequestMetadata
	0, // 1: dispatch.v1alpha1.DispatchCheckRequest.resolution_behavior:type_name -> dispatch.v1alpha1.DispatchCheckRequest.ResolutionBehavior
	6, // 2: dispatch.v1alpha1.DispatchCheckResponse.results_foreach_object_id:type_name -> dispatch.v1alpha1.DispatchCheckResponse.ResultsForeachObjectIdEntry
	4, // 3: dispatch.v1alpha1.DispatchCheckResponse.resolution_metadata:type_name -> dispatch.v1alpha1.DispatchCheckResolutionMetadata
	7, // 4: dispatch.v1alpha1.DispatchCheckRequestMetadata.visited_parent_subproblems:type_name -> dispatch.v1alpha1.DispatchCheckRequestMetadata.VisitedParentSubproblemsEntry
	5, // 5: dispatch.v1alpha1.DispatchCheckResponse.ResultsForeachObjectIdEntry.value:type_name -> dispatch.v1alpha1.DispatchCheckResult
	8, // 6: dispatch.v1alpha1.DispatchCheckRequestMetadata.VisitedParentSubproblemsEntry.value:type_name -> google.protobuf.Empty
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_dispatch_v1alpha1_dispatch_service_proto_init() }
func file_dispatch_v1alpha1_dispatch_service_proto_init() {
	if File_dispatch_v1alpha1_dispatch_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchCheckRequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchCheckResolutionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatch_v1alpha1_dispatch_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dispatch_v1alpha1_dispatch_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dispatch_v1alpha1_dispatch_service_proto_goTypes,
		DependencyIndexes: file_dispatch_v1alpha1_dispatch_service_proto_depIdxs,
		EnumInfos:         file_dispatch_v1alpha1_dispatch_service_proto_enumTypes,
		MessageInfos:      file_dispatch_v1alpha1_dispatch_service_proto_msgTypes,
	}.Build()
	File_dispatch_v1alpha1_dispatch_service_proto = out.File
	file_dispatch_v1alpha1_dispatch_service_proto_rawDesc = nil
	file_dispatch_v1alpha1_dispatch_service_proto_goTypes = nil
	file_dispatch_v1alpha1_dispatch_service_proto_depIdxs = nil
}
